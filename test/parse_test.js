/*global describe it */
var assert = require('assert');
var parseRecord = require('../js/parse_record.js');

describe('Parse Record', function() {
  it('should parse eddystone beacon', function() {
    // this is eddystone beacon I got from ARM
    var data = [
      0x2, 0x1, 0x6, 0x3, 0x3, 0xaa, 0xfe, // eddystone header
      0x12, // length (?) -> 18
      0x16, // service data type value
      0xaa, 0xfe, // eddystone UUID
      0x10, // frame type == Eddystone URL
      0xdf, // TX Power
      0x2, // URL scheme
      0x6a, 0x61, 0x6e, 0x6a, 0x6f, 0x6e, 0x67, 0x62, 0x6f, 0x6f, 0x6d, 0x7, // Encoded URL + end of frame
      0x0, 0x0, 0x0, 0x0, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, // rest of it is junk
      0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,
      0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a ];

    var parsed = parseRecord(data);
    assert.notEqual(parsed, null);
    assert.equal(parsed.uri, 'http://janjongboom.com', 'uri');
    assert.equal(parsed.txPower, 223, 'txPower');
  });

  it('should not parse eddystone that has non-url frame type', function() {
    // this is eddystone beacon I got from ARM
    var data = [
      0x2, 0x1, 0x6, 0x3, 0x3, 0xaa, 0xfe, // eddystone header
      0x12, // length (?) -> 18
      0x16, // service data type value
      0xaa, 0xfe, // eddystone UUID
      0x11, // frame type != Eddystone URL
      0xdf, // TX Power
      0x2, // URL scheme
      0x6a, 0x61, 0x6e, 0x6a, 0x6f, 0x6e, 0x67, 0x62, 0x6f, 0x6f, 0x6d, 0x7, // Encoded URL + end of frame
      0x0, 0x0, 0x0, 0x0, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, // rest of it is junk
      0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,
      0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a ];

    var parsed = parseRecord(data);
    assert.equal(parsed, false);
  });

  it('should parse uri beacon', function() {
    var data = [ 0x2, 0x1, 0x6, 0x3, 0x3, 0xd8, 0xfe, 0x13, 0x16, 0xd8, 0xfe,
                 0x0, 0xfc, 0x2, 0x67, 0x6f, 0x6f, 0x2e, 0x67, 0x6c, 0x2f,
                 0x6b, 0x46, 0x45, 0x36, 0x65, 0x59, 0x0, 0x0, 0x0, 0x5a, 0x5a,
                 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,
                 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a,
                 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a, 0x5a ];

    var parsed = parseRecord(data);
    assert.notEqual(parsed, null);
    assert.equal(parsed.uri, 'http://goo.gl/kFE6eY', 'uri');
    assert.equal(parsed.txPower, 252, 'txPower');
  });

  it('should bail on bogus data', function() {
    var data = [ 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7 ];

    var parsed = parseRecord(data);
    assert.equal(parsed, false);
  });
});
